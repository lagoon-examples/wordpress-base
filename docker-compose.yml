version: '2.3'

x-lagoon-project:
  # Lagoon project name (leave `&lagoon-project` when you edit this)
  &lagoon-project wordpress-example

x-volumes:
  &default-volumes
    # Define all volumes you would like to have real-time mounted into the docker containers
    volumes:
      - .:/app:delegated ### Local overrides to mount host filesystem. Automatically removed in CI and PROD.
      - uploads:/app/web/content/uploads

x-environment:
  &default-environment
    LAGOON_PROJECT: *lagoon-project
    # Route that should be used locally
    LAGOON_ROUTE: http://wordpress-example-simple.docker.amazee.io
    # Uncomment if you like to have the system behave like in production
    #LAGOON_ENVIRONMENT_TYPE: production
    # Uncomment to enable xdebug and then restart via `docker-compose up -d`
    #XDEBUG_ENABLE: "true"

volumes:
  uploads:
    {}

services:

  cli: # cli container, will be used for executing composer and any local commands (wpcli etc.)
    build:
      context: .
      dockerfile: lagoon/cli.dockerfile
    image: *lagoon-project # this image will be reused as `CLI_IMAGE` in subsequent Docker builds
    labels:
      # Lagoon Labels
      lagoon.type: cli-persistent
      lagoon.persistent.name: nginx # mount the persistent storage of nginx into this container
      lagoon.persistent: /app/web/content/uploads/ # location where the persistent storage should be mounted
      lando.type: php-cli
    << : *default-volumes # loads the defined volumes from the top
    volumes_from: ### mount the ssh-agent from the pygmy or cachalot ssh-agent. Automatically removed in CI.
      - container:amazeeio-ssh-agent ### Local overrides to mount host SSH keys. Automatically removed in CI.
    environment:
      << : *default-environment # loads the defined environment variables from the top

  nginx:
    build:
      context: .
      dockerfile: lagoon/nginx.dockerfile
      args:
        CLI_IMAGE: *lagoon-project # Inject the name of the cli image
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.persistent: /app/web/content/uploads/ # define where the persistent storage should be mounted too
      lando.type: nginx  
    ports:
      - "8080"
    << : *default-volumes # loads the defined volumes from the top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      << : *default-environment # loads the defined environment variables from the top
    networks:
      - amazeeio-network
      - default

  php:
    build:
      context: .
      dockerfile: lagoon/php.dockerfile
      args:
        CLI_IMAGE: *lagoon-project
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.name: nginx # we want this service be part of the nginx pod in Lagoon
      lagoon.persistent: /app/web/content/uploads/ # define where the persistent storage should be mounted too
      lando.type: php-fpm
    << : *default-volumes # loads the defined volumes from the top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      << : *default-environment # loads the defined environment variables from the top


  mariadb:
    image: uselagoon/mariadb-10.5:latest
    labels:
      lagoon.type: mariadb
      lando.type: mariadb
    ports:
      - "3306" # exposes the port 3306 with a random local port, find it with `docker-compose port mariadb 3306`
    environment:
      << : *default-environment

  varnish:
    image: uselagoon/varnish-5:latest
    labels:
      lagoon.type: varnish
      lando.type: varnish
    links:
      - nginx # links varnish to the nginx in this docker-compose project, or it would try to connect to any nginx running in docker
    environment:
      << : *default-environment
      LAGOON_LOCALDEV_URL: wordpress-varnish.docker.amazee.io # generate another route for varnish
    networks:
      - amazeeio-network
      - default

networks:
  amazeeio-network:
    external: true
